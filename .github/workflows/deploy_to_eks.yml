name: Build, Scan, and Deploy to EKS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'kubernetes/**'
      - 'docker/**'
      - 'requirements*.txt'
      - '.github/workflows/deploy_to_eks.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'kubernetes/**'
      - 'docker/**'
      - 'requirements*.txt'

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com
  EKS_CLUSTER_NAME: champions-league-cluster
  NAMESPACE: default  
  ENVIRONMENT: production
  DEPLOYMENT_TIMEOUT: 5m
  HEALTH_CHECK_RETRIES: 3

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  ## -----------------------------------------------------------------
  ## 1. Run Linters and Tests
  ## -----------------------------------------------------------------
  test:
    name: "🧪 Test and Analyze"
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Run tests in Docker container"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker run --rm \
            -e AIRFLOW_HOME=/tmp/airflow \
            -e AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////tmp/airflow/airflow.db \
            --volume ${{ github.workspace }}:/app \
            --workdir /app \
            $ECR_REGISTRY/champions-league/ci-base:latest \
            /bin/sh -c "airflow db init && pytest tests/"

  ## -----------------------------------------------------------------
  ## 2. Build, Push, and Scan Images
  ## -----------------------------------------------------------------
  build-and-scan:
    name: "📦 Build & Scan Services"
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [ingestion, data_quality, transformations, export]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Verify ECR repository exists"
        run: |
          # Map directory names to ECR repository names
          case "${{ matrix.service }}" in
            "data_quality")
              REPO_NAME="champions-league/data-quality"
              ;;
            "transformations")
              REPO_NAME="champions-league/data-transformation"
              ;;
            "ingestion")
              REPO_NAME="champions-league/data-ingestion"
              ;;
            "export")
              REPO_NAME="champions-league/data-export"
              ;;
            *)
              REPO_NAME="champions-league/data-${{ matrix.service }}"
              ;;
          esac

          echo "Checking repository: $REPO_NAME"

          if aws ecr describe-repositories --repository-names $REPO_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "✅ Repository $REPO_NAME exists"
          else
            echo "❌ Repository $REPO_NAME not found!"
            exit 1
          fi
          
      - name: "Build, tag, and push image to Amazon ECR"
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Map directory names to ECR Repository names
          case "${{ matrix.service }}" in
            "data_quality")
              ECR_REPOSITORY="champions-league/data-quality"
              ;;
            "transformations")
              ECR_REPOSITORY="champions-league/data-transformation"
              ;;
            *)
              ECR_REPOSITORY="champions-league/data-${{ matrix.service }}"
              ;;
          esac

          DOCKERFILE="Dockerfile.python"
          BUILD_ARGS="--build-arg SERVICE_DIR=${{ matrix.service }}"

          if [[ "${{ matrix.service }}" == "transformations" ]]; then
            echo "Using Spark Dockerfile for transformation service..."
            DOCKERFILE="Dockerfile.spark"
          fi

          echo "Building ${{ matrix.service }} from src/${{ matrix.service }}"
          echo "ECR Repository: $ECR_REPOSITORY"

          docker build \
            $BUILD_ARGS \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f docker/$DOCKERFILE .
            
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: "Run Trivy vulnerability scanner"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_uri }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: "Upload Trivy scan results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  ## -----------------------------------------------------------------
  ## 3. Deploy All Services to EKS
  ## -----------------------------------------------------------------
  deploy:
    name: "🚀 Deploy to EKS"
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Install kubectl and kustomize"
        run: |
          # Install kubectl using the official AWS method
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-14/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

          # Verify kubectl installation
          kubectl version --client

          # Install kustomize directly from GitHub releases
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.2.1/kustomize_v5.2.1_linux_amd64.tar.gz -o kustomize.tar.gz
          tar xzf kustomize.tar.gz
          sudo mv kustomize /usr/local/bin/

          # Verify kustomize installation
          kustomize version

      - name: "Update kubeconfig"
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: "Check cluster resources"
        run: |
          echo "### Cluster Status ###"
          echo "Cluster nodes:"
          kubectl get nodes
          echo ""
          echo "Node resources:"
          kubectl top nodes || echo "Metrics server not available"
          echo ""
          echo "Namespace resources:"
          kubectl get all -n ${{ env.NAMESPACE }}

      - name: "Update Kustomize manifests with new image tags"
        run: |
          cd kubernetes/overlays/production
          for service in ingestion quality transformation export; do
            kustomize edit set image champions-league/data-$service=${{ env.ECR_REGISTRY }}/champions-league/data-$service:${{ github.sha }}
          done
          echo "Updated kustomization.yaml:"
          cat kustomization.yaml

      - name: "Deploy to EKS using Kustomize"
        id: deploy
        run: |
          echo "Applying Kubernetes manifests..."
          kustomize build kubernetes/overlays/production | kubectl apply -f -
          echo "Waiting for rollout to begin..."
          sleep 10

      - name: "Verify deployments"
        id: verify
        run: |
          for service in ingestion quality transformation export; do
            echo "Checking ${service}-service deployment..."
            kubectl rollout status deployment/${service}-service -n ${{ env.NAMESPACE }} --timeout=${{ env.DEPLOYMENT_TIMEOUT }} || exit 1
          done

      - name: "Run deployment smoke tests"
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          for service in ingestion quality transformation export; do
            echo "Testing health of ${service}-service..."
            for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
              kubectl run smoke-test-$service-$i \
                --image=curlimages/curl:latest \
                -n ${{ env.NAMESPACE }} \
                --rm -i --restart=Never -- \
                curl -f --max-time 10 http://${service}-service/health && break || \
                (echo "Health check attempt $i failed for ${service}-service" && \
                 [ $i -eq ${{ env.HEALTH_CHECK_RETRIES }} ] && exit 1 || sleep 10)
            done
          done

      - name: "Post-deployment validation"
        if: success()
        run: |
          echo "### Post-deployment checks ###"
          
          # Check pod health
          echo "=== Pod Status ==="
          kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/part-of=champions-league
          
          # Check service endpoints
          echo "=== Service Endpoints ==="
          kubectl get endpoints -n ${{ env.NAMESPACE }}
          
          # Check recent events for any issues
          echo "=== Recent Events ==="
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' | tail -20
          
          # Verify connectivity between services
          echo "=== Service Connectivity Test ==="
          kubectl run connectivity-test \
            --image=nicolaka/netshoot \
            -n ${{ env.NAMESPACE }} \
            --rm -i --restart=Never -- \
            sh -c "nslookup ingestion-service && nslookup quality-service && nslookup transformation-service && nslookup export-service"

      - name: "Generate deployment summary"
        if: success()
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Deployed Services:" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Image Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          for service in ingestion quality transformation export; do
            STATUS=$(kubectl get deployment ${service}-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "Unknown")
            echo "| ${service}-service | ${GITHUB_SHA:0:7} | $STATUS |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: "Rollback on failure"
        if: failure() && (steps.deploy.outcome == 'failure' || steps.verify.outcome == 'failure')
        run: |
          echo "### Deployment failed, rolling back... ###"
          for service in ingestion quality transformation export; do
            echo "Rolling back ${service}-service..."
            kubectl rollout undo deployment/${service}-service -n ${{ env.NAMESPACE }} || true
                        kubectl rollout status deployment/${service}-service -n ${{ env.NAMESPACE }} --timeout=2m || true
          done
          echo "Rollback completed"

      - name: "Send detailed deployment notification"
        if: always()
        run: |
          DEPLOYMENT_STATUS="${{ job.status }}"
          SERVICES=("ingestion" "quality" "transformation" "export")
          
          if [[ "$DEPLOYMENT_STATUS" == "success" ]]; then
            SUBJECT="✅ Champions League Pipeline Deployed Successfully"
            MESSAGE="Deployment successful to EKS cluster '${{ env.EKS_CLUSTER_NAME }}' in namespace '${{ env.NAMESPACE }}'."
            MESSAGE+="\n\nDeployed services:"
            for service in "${SERVICES[@]}"; do
              MESSAGE+="\n- ${service}-service: ${{ env.ECR_REGISTRY }}/champions-league/data-${service}:${{ github.sha }}"
            done
            MESSAGE+="\n\nCommit: ${{ github.sha }}"
            MESSAGE+="\nTriggered by: ${{ github.actor }}"
            MESSAGE+="\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          else
            SUBJECT="❌ Champions League Pipeline Deployment Failed"
            MESSAGE="Deployment to EKS failed."
            MESSAGE+="\n\nCluster: ${{ env.EKS_CLUSTER_NAME }}"
            MESSAGE+="\nNamespace: ${{ env.NAMESPACE }}"
            MESSAGE+="\n\nFailed services might include:"
            for service in "${SERVICES[@]}"; do
              MESSAGE+="\n- ${service}-service"
            done
            MESSAGE+="\n\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            MESSAGE+="\n\nCommit: ${{ github.sha }}"
            MESSAGE+="\nTriggered by: ${{ github.actor }}"
            
            # Include last error logs
            MESSAGE+="\n\nLast deployment events:"
            EVENTS=$(kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' | tail -5 | head -c 500)
            MESSAGE+="\n$EVENTS"
          fi
          
          aws sns publish \
            --topic-arn "${{ secrets.SNS_TOPIC_ARN }}" \
            --subject "$SUBJECT" \
            --message "$MESSAGE"

  ## -----------------------------------------------------------------
  ## 4. Cleanup on PR (Optional)
  ## -----------------------------------------------------------------
  cleanup-pr:
    name: "🧹 Cleanup PR Environment"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Update kubeconfig"
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: "Cleanup PR resources"
        run: |
          PR_NAMESPACE="pr-${{ github.event.pull_request.number }}"
          if kubectl get namespace $PR_NAMESPACE 2>/dev/null; then
            echo "Cleaning up PR namespace: $PR_NAMESPACE"
            kubectl delete namespace $PR_NAMESPACE --wait=false
          else
            echo "No PR namespace to clean up"
          fi

  ## -----------------------------------------------------------------
  ## 5. Security Scan Summary (Runs after build-and-scan)
  ## -----------------------------------------------------------------
  security-summary:
    name: "🔒 Security Scan Summary"
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: always() && needs.build-and-scan.result != 'skipped'
    steps:
      - name: "Generate Security Summary"
        run: |
          echo "### 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Scan Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ingestion | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| quality | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| transformation | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| export | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 View detailed scan results in the Security tab" >> $GITHUB_STEP_SUMMARY