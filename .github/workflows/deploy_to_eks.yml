name: Build, Scan, and Deploy to EKS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'kubernetes/**'
      - 'docker/**'
      - 'requirements*.txt' 
      - '.github/workflows/deploy_to_eks.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'kubernetes/**'
      - 'docker/**'
      - 'requirements*.txt'

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com
  EKS_CLUSTER_NAME: champions-league-cluster
  NAMESPACE: champions-league

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  ## -----------------------------------------------------------------
  ## 1. Run Linters and Tests in a Pre-built Container
  ## -----------------------------------------------------------------
  test:
    name: "üß™ Test and Analyze"
    runs-on: ubuntu-latest
    
    # Use the pre-built CI image from ECR for speed and reliability
    container:
      image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/champions-league/ci-base:latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Run linters and type checking"
        run: |
          black --check src/
          flake8 src/
          mypy src/ --ignore-missing-imports

      - name: "Run unit tests and generate coverage"
        run: pytest tests/ --cov=src --cov-report=xml

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  ## -----------------------------------------------------------------
  ## 2. Build, Push, and Scan Images
  ## -----------------------------------------------------------------
  build-and-scan:
    name: "üì¶ Build & Scan Services"
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [ingestion, data-quality, transformation, export]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Build, tag, and push image to Amazon ECR"
        id: build-image
        env:
          ECR_REPOSITORY: champions-league/data-${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          DOCKERFILE="Dockerfile.python"
          BUILD_ARGS="--build-arg SERVICE_DIR=${{ matrix.service }}"

          if [[ "${{ matrix.service }}" == "transformation" ]]; then
            echo "Using Spark Dockerfile for transformation service..."
            DOCKERFILE="Dockerfile.spark"
            BUILD_ARGS="" # No build-arg needed as the path is hardcoded
          fi

          docker build \
            $BUILD_ARGS \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f docker/$DOCKERFILE .
            
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: "Run Trivy vulnerability scanner"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_uri }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: "Upload Trivy scan results"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  ## -----------------------------------------------------------------
  ## 3. Deploy All Services to EKS
  ## -----------------------------------------------------------------
  deploy:
    name: "üöÄ Deploy to EKS"
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Install kubectl and kustomize"
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: "Update kubeconfig"
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: "Update Kustomize manifests with new image tags"
        run: |
          cd kubernetes/overlays/production
          kustomize edit set image champions-league/data-ingestion=${{ env.ECR_REGISTRY }}/champions-league/data-ingestion:${{ github.sha }}
          kustomize edit set image champions-league/data-quality=${{ env.ECR_REGISTRY }}/champions-league/data-quality:${{ github.sha }}
          kustomize edit set image champions-league/data-transformation=${{ env.ECR_REGISTRY }}/champions-league/data-transformation:${{ github.sha }}
          kustomize edit set image champions-league/data-export=${{ env.ECR_REGISTRY }}/champions-league/data-export:${{ github.sha }}
          cat kustomization.yaml

      - name: "Deploy to EKS using Kustomize"
        run: |
          kustomize build kubernetes/overlays/production | kubectl apply -f -
          echo "Waiting for changes to apply..."
          sleep 10

      - name: "Verify deployments"
        run: kubectl rollout status deployment --all -n ${{ env.NAMESPACE }} --timeout=5m

      - name: "Run deployment smoke tests"
        run: |
          for service in ingestion data-quality transformation export; do
            echo "Testing health of data-$service..."
            kubectl run smoke-test-$service --image=curlimages/curl:latest -n ${{ env.NAMESPACE }} --rm -i --restart=Never -- \
              curl -f --max-time 10 http://data-$service/health || (echo "Health check for data-$service failed!" && exit 1)
          done

      - name: "Send Deployment Notification"
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            SUBJECT="‚úÖ Success: EKS Deployment"
            MESSAGE="Services deployed to EKS cluster '${{ env.EKS_CLUSTER_NAME }}'. Commit: ${{ github.sha }}"
          else
            SUBJECT="‚ùå Failure: EKS Deployment"
            MESSAGE="EKS deployment failed. Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
          aws sns publish --topic-arn "${{ secrets.SNS_TOP_ARN }}" --subject "$SUBJECT" --message "$MESSAGE"